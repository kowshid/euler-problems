(*
    Project Euler #29

    Distinct powers
    --------------------

    Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

    2^2=4, 2^3=8, 2^4=16, 2^5=32
    3^2=9, 3^3=27, 3^4=81, 3^5=243
    4^2=16, 4^3=64, 4^4=256, 4^5=1024
    5^2=25, 5^3=125, 5^4=625, 5^5=3125
    If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

    4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

    How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
*)

let calculateCountOfDistinctTerms (baseLimit: bigint) (powerLimit: int) : int =
    seq {
        for baseNum in 2I .. baseLimit do
            for power in 2 .. powerLimit do
                yield pown baseNum power
    }
    |> Set.ofSeq
    |> Set.count

printf "Enter base limit: "
let baseLimit = bigint.Parse(System.Console.ReadLine())

printf "Enter power limit: "
let powerLimit = System.Int32.Parse(System.Console.ReadLine())

let timer = System.Diagnostics.Stopwatch.StartNew()

let result = calculateCountOfDistinctTerms baseLimit powerLimit

timer.Stop()

printfn "Distinct terms are in the sequence generated by ab for 2 ≤ a ≤ %A and 2 ≤ b ≤ %d is %d" baseLimit powerLimit result
printfn "Time elapsed in milliseconds %f" timer.Elapsed.TotalMilliseconds

// Answer: 9110846700
// Run Time: 45.3761 milliseconds