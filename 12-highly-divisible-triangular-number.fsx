(*
    Project Euler #12

    Highly divisible triangular number
    --------------------

    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:
    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over five divisors.
    What is the value of the first triangle number to have over five hundred divisors?
*)

let getDivisorCount (num: uint64) : uint16 =
    let rec calculateDivisorCount (numToGeDivisors: uint64) (currFactorToCheck: uint64) (factorLimit: uint64) (divisorCount: uint16) : uint16 =
        if currFactorToCheck > factorLimit then
            divisorCount
        elif numToGeDivisors % currFactorToCheck = 0UL then
            calculateDivisorCount numToGeDivisors (currFactorToCheck + 1UL) factorLimit divisorCount + 2us
        else
            calculateDivisorCount numToGeDivisors (currFactorToCheck + 1UL) factorLimit divisorCount

    let squareRootOfNum = uint64 (sqrt (double num))

    calculateDivisorCount num 1UL squareRootOfNum 0us

let getTriangleNumberWithThresholdDivisorCount (divisorCountThreshold: uint16) : uint64 =
    Seq.unfold
        (fun (iter, curTriangularNum) ->
            Some (curTriangularNum, (iter + 1UL, curTriangularNum + iter))
        )
        (1UL, 0UL)
    |> Seq.find
        (fun numTogetFactors ->
            getDivisorCount numTogetFactors > divisorCountThreshold
        )

printf "Enter the threshold count of divisors: "

let divisorCountThreshold = System.UInt16.Parse(System.Console.ReadLine())

let timer = System.Diagnostics.Stopwatch.StartNew()

let result = getTriangleNumberWithThresholdDivisorCount divisorCountThreshold

timer.Stop()

printfn "the value of the first triangle number to have over %d divisors is %d" divisorCountThreshold result
printfn "Time elapsed in milliseconds %f" timer.Elapsed.TotalMilliseconds

// Answer: 76576500
// Run Time: 153.1723 milliseconds